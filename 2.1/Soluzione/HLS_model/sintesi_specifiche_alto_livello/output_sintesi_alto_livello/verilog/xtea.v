// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="xtea,hls_ip_2018_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.656000,HLS_SYN_LAT=66,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=628,HLS_SYN_LUT=1606,HLS_VERSION=2018_2_2}" *)

module xtea (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        word0,
        word1,
        key0,
        key1,
        key2,
        key3,
        mode,
        result0,
        result0_ap_vld,
        result1,
        result1_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] word0;
input  [31:0] word1;
input  [31:0] key0;
input  [31:0] key1;
input  [31:0] key2;
input  [31:0] key3;
input   mode;
output  [31:0] result0;
output   result0_ap_vld;
output  [31:0] result1;
output   result1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg result0_ap_vld;
reg result1_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_3_fu_260_p2;
reg   [5:0] i_3_reg_836;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_21_fu_352_p2;
reg   [31:0] tmp_21_reg_841;
wire   [0:0] tmp_1_fu_254_p2;
wire   [31:0] tmp_45_fu_358_p1;
reg   [31:0] tmp_45_reg_846;
wire   [31:0] tmp_23_fu_362_p2;
reg   [31:0] tmp_23_reg_851;
wire   [36:0] sum_3_fu_372_p2;
reg   [36:0] sum_3_reg_856;
wire   [31:0] newSel11_fu_450_p3;
reg   [31:0] newSel11_reg_861;
wire   [31:0] v0_2_fu_462_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] v1_4_fu_516_p2;
wire   [5:0] i_2_fu_528_p2;
reg   [5:0] i_2_reg_879;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_11_fu_634_p2;
reg   [31:0] tmp_11_reg_884;
wire   [0:0] tmp_fu_522_p2;
wire   [31:0] tmp_18_fu_640_p1;
reg   [31:0] tmp_18_reg_889;
wire   [31:0] tmp_13_fu_644_p2;
reg   [31:0] tmp_13_reg_894;
wire   [37:0] sum_2_fu_654_p2;
reg   [37:0] sum_2_reg_899;
wire   [31:0] newSel6_fu_714_p3;
reg   [31:0] newSel6_reg_904;
wire   [31:0] v1_2_fu_726_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] v0_4_fu_780_p2;
reg   [36:0] sum_reg_146;
wire   [0:0] mode_read_read_fu_90_p2;
reg   [5:0] i_reg_157;
reg   [31:0] v0_reg_168;
reg   [31:0] v1_reg_178;
reg   [37:0] sum_1_reg_188;
reg   [5:0] i_1_reg_199;
reg   [31:0] v0_1_reg_210;
reg   [31:0] v1_1_reg_220;
reg   [31:0] v0_3_reg_230;
reg   [31:0] v1_3_reg_242;
wire    ap_CS_fsm_state6;
wire   [1:0] tmp_37_fu_266_p1;
wire   [0:0] tmp_5_fu_270_p2;
wire   [0:0] tmp_7_fu_276_p2;
wire   [0:0] sel_tmp1_fu_288_p2;
wire   [0:0] sel_tmp2_fu_294_p2;
wire   [0:0] tmp_9_fu_282_p2;
wire   [0:0] or_cond_fu_306_p2;
wire   [31:0] newSel_fu_300_p3;
wire   [31:0] newSel7_fu_312_p3;
wire   [26:0] tmp_19_fu_332_p4;
wire   [31:0] tmp_43_fu_326_p2;
wire   [31:0] tmp_44_fu_342_p1;
wire   [31:0] tmp_20_fu_346_p2;
wire   [31:0] newSel8_fu_318_p3;
wire   [12:0] tmp_46_fu_368_p1;
wire   [12:0] sum_3_cast_fu_378_p2;
wire   [1:0] tmp_47_fu_384_p4;
wire   [12:0] tmp_25_fu_394_p3;
wire   [0:0] tmp_26_fu_402_p2;
wire   [0:0] tmp_28_fu_408_p2;
wire   [0:0] sel_tmp5_fu_420_p2;
wire   [0:0] sel_tmp6_fu_426_p2;
wire   [0:0] tmp_30_fu_414_p2;
wire   [0:0] or_cond3_fu_438_p2;
wire   [31:0] newSel9_fu_432_p3;
wire   [31:0] newSel10_fu_444_p3;
wire   [31:0] tmp_24_fu_458_p2;
wire   [26:0] tmp_38_fu_474_p4;
wire   [31:0] tmp_48_fu_468_p2;
wire   [31:0] tmp_49_fu_484_p1;
wire   [31:0] tmp_39_fu_488_p2;
wire   [31:0] tmp17_fu_500_p2;
wire   [31:0] tmp_41_fu_505_p2;
wire   [31:0] tmp_40_fu_494_p2;
wire   [31:0] tmp_42_fu_510_p2;
wire   [1:0] tmp_s_fu_534_p4;
wire   [12:0] tmp_2_fu_544_p3;
wire   [0:0] tmp_3_fu_552_p2;
wire   [0:0] tmp_6_fu_558_p2;
wire   [0:0] sel_tmp_fu_570_p2;
wire   [0:0] sel_tmp3_fu_576_p2;
wire   [0:0] tmp_8_fu_564_p2;
wire   [0:0] or_cond1_fu_588_p2;
wire   [31:0] newSel1_fu_582_p3;
wire   [31:0] newSel2_fu_594_p3;
wire   [26:0] tmp_4_fu_614_p4;
wire   [31:0] tmp_12_fu_608_p2;
wire   [31:0] tmp_15_fu_624_p1;
wire   [31:0] tmp_10_fu_628_p2;
wire   [31:0] newSel3_fu_600_p3;
wire   [1:0] tmp_22_fu_650_p1;
wire   [1:0] sum_2_cast_fu_660_p2;
wire   [0:0] tmp_16_fu_666_p2;
wire   [0:0] tmp_17_fu_672_p2;
wire   [0:0] sel_tmp4_fu_684_p2;
wire   [0:0] sel_tmp7_fu_690_p2;
wire   [0:0] tmp_27_fu_678_p2;
wire   [0:0] or_cond2_fu_702_p2;
wire   [31:0] newSel4_fu_696_p3;
wire   [31:0] newSel5_fu_708_p3;
wire   [31:0] tmp_14_fu_722_p2;
wire   [26:0] tmp_31_fu_738_p4;
wire   [31:0] tmp_29_fu_732_p2;
wire   [31:0] tmp_36_fu_748_p1;
wire   [31:0] tmp_32_fu_752_p2;
wire   [31:0] tmp16_fu_764_p2;
wire   [31:0] tmp_34_fu_769_p2;
wire   [31:0] tmp_33_fu_758_p2;
wire   [31:0] tmp_35_fu_774_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (mode_read_read_fu_90_p2 == 1'd1))) begin
        i_1_reg_199 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_199 <= i_2_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_read_read_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_157 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_157 <= i_3_reg_836;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (mode_read_read_fu_90_p2 == 1'd1))) begin
        sum_1_reg_188 <= 38'd3337565984;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_1_reg_188 <= sum_2_reg_899;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_read_read_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_reg_146 <= 37'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_reg_146 <= sum_3_reg_856;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (mode_read_read_fu_90_p2 == 1'd1))) begin
        v0_1_reg_210 <= word0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v0_1_reg_210 <= v0_4_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v0_3_reg_230 <= v0_reg_168;
    end else if (((tmp_fu_522_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        v0_3_reg_230 <= v0_1_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_read_read_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v0_reg_168 <= word0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v0_reg_168 <= v0_2_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (mode_read_read_fu_90_p2 == 1'd1))) begin
        v1_1_reg_220 <= word1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v1_1_reg_220 <= v1_2_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v1_3_reg_242 <= v1_reg_178;
    end else if (((tmp_fu_522_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        v1_3_reg_242 <= v1_1_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_read_read_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v1_reg_178 <= word1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v1_reg_178 <= v1_4_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_879 <= i_2_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_836 <= i_3_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        newSel11_reg_861 <= newSel11_fu_450_p3;
        sum_3_reg_856 <= sum_3_fu_372_p2;
        tmp_21_reg_841 <= tmp_21_fu_352_p2;
        tmp_23_reg_851 <= tmp_23_fu_362_p2;
        tmp_45_reg_846 <= tmp_45_fu_358_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_522_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        newSel6_reg_904 <= newSel6_fu_714_p3;
        sum_2_reg_899 <= sum_2_fu_654_p2;
        tmp_11_reg_884 <= tmp_11_fu_634_p2;
        tmp_13_reg_894 <= tmp_13_fu_644_p2;
        tmp_18_reg_889 <= tmp_18_fu_640_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result0_ap_vld = 1'b1;
    end else begin
        result0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result1_ap_vld = 1'b1;
    end else begin
        result1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (mode_read_read_fu_90_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((mode_read_read_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_1_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_fu_522_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_2_fu_528_p2 = (i_1_reg_199 + 6'd1);

assign i_3_fu_260_p2 = (i_reg_157 + 6'd1);

assign mode_read_read_fu_90_p2 = mode;

assign newSel10_fu_444_p3 = ((tmp_30_fu_414_p2[0:0] === 1'b1) ? key2 : key3);

assign newSel11_fu_450_p3 = ((or_cond3_fu_438_p2[0:0] === 1'b1) ? newSel9_fu_432_p3 : newSel10_fu_444_p3);

assign newSel1_fu_582_p3 = ((sel_tmp3_fu_576_p2[0:0] === 1'b1) ? key1 : key0);

assign newSel2_fu_594_p3 = ((tmp_8_fu_564_p2[0:0] === 1'b1) ? key2 : key3);

assign newSel3_fu_600_p3 = ((or_cond1_fu_588_p2[0:0] === 1'b1) ? newSel1_fu_582_p3 : newSel2_fu_594_p3);

assign newSel4_fu_696_p3 = ((sel_tmp7_fu_690_p2[0:0] === 1'b1) ? key1 : key0);

assign newSel5_fu_708_p3 = ((tmp_27_fu_678_p2[0:0] === 1'b1) ? key2 : key3);

assign newSel6_fu_714_p3 = ((or_cond2_fu_702_p2[0:0] === 1'b1) ? newSel4_fu_696_p3 : newSel5_fu_708_p3);

assign newSel7_fu_312_p3 = ((tmp_9_fu_282_p2[0:0] === 1'b1) ? key2 : key3);

assign newSel8_fu_318_p3 = ((or_cond_fu_306_p2[0:0] === 1'b1) ? newSel_fu_300_p3 : newSel7_fu_312_p3);

assign newSel9_fu_432_p3 = ((sel_tmp6_fu_426_p2[0:0] === 1'b1) ? key1 : key0);

assign newSel_fu_300_p3 = ((sel_tmp2_fu_294_p2[0:0] === 1'b1) ? key1 : key0);

assign or_cond1_fu_588_p2 = (tmp_3_fu_552_p2 | sel_tmp3_fu_576_p2);

assign or_cond2_fu_702_p2 = (tmp_16_fu_666_p2 | sel_tmp7_fu_690_p2);

assign or_cond3_fu_438_p2 = (tmp_26_fu_402_p2 | sel_tmp6_fu_426_p2);

assign or_cond_fu_306_p2 = (tmp_5_fu_270_p2 | sel_tmp2_fu_294_p2);

assign result0 = v0_3_reg_230;

assign result1 = v1_3_reg_242;

assign sel_tmp1_fu_288_p2 = (tmp_5_fu_270_p2 ^ 1'd1);

assign sel_tmp2_fu_294_p2 = (tmp_7_fu_276_p2 & sel_tmp1_fu_288_p2);

assign sel_tmp3_fu_576_p2 = (tmp_6_fu_558_p2 & sel_tmp_fu_570_p2);

assign sel_tmp4_fu_684_p2 = (tmp_16_fu_666_p2 ^ 1'd1);

assign sel_tmp5_fu_420_p2 = (tmp_26_fu_402_p2 ^ 1'd1);

assign sel_tmp6_fu_426_p2 = (tmp_28_fu_408_p2 & sel_tmp5_fu_420_p2);

assign sel_tmp7_fu_690_p2 = (tmp_17_fu_672_p2 & sel_tmp4_fu_684_p2);

assign sel_tmp_fu_570_p2 = (tmp_3_fu_552_p2 ^ 1'd1);

assign sum_2_cast_fu_660_p2 = ($signed(2'd3) + $signed(tmp_22_fu_650_p1));

assign sum_2_fu_654_p2 = ($signed(38'd272223471175) + $signed(sum_1_reg_188));

assign sum_3_cast_fu_378_p2 = ($signed(13'd6585) + $signed(tmp_46_fu_368_p1));

assign sum_3_fu_372_p2 = (37'd2654435769 + sum_reg_146);

assign tmp16_fu_764_p2 = (32'd1640531527 + newSel6_reg_904);

assign tmp17_fu_500_p2 = ($signed(32'd2654435769) + $signed(newSel11_reg_861));

assign tmp_10_fu_628_p2 = (tmp_15_fu_624_p1 ^ tmp_12_fu_608_p2);

assign tmp_11_fu_634_p2 = (tmp_10_fu_628_p2 + v0_1_reg_210);

assign tmp_12_fu_608_p2 = v0_1_reg_210 << 32'd4;

assign tmp_13_fu_644_p2 = (newSel3_fu_600_p3 + tmp_18_fu_640_p1);

assign tmp_14_fu_722_p2 = (tmp_13_reg_894 ^ tmp_11_reg_884);

assign tmp_15_fu_624_p1 = tmp_4_fu_614_p4;

assign tmp_16_fu_666_p2 = ((sum_2_cast_fu_660_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_17_fu_672_p2 = ((sum_2_cast_fu_660_p2 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_18_fu_640_p1 = sum_1_reg_188[31:0];

assign tmp_19_fu_332_p4 = {{v1_reg_178[31:5]}};

assign tmp_1_fu_254_p2 = ((i_reg_157 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_20_fu_346_p2 = (tmp_44_fu_342_p1 ^ tmp_43_fu_326_p2);

assign tmp_21_fu_352_p2 = (tmp_20_fu_346_p2 + v1_reg_178);

assign tmp_22_fu_650_p1 = sum_1_reg_188[1:0];

assign tmp_23_fu_362_p2 = (newSel8_fu_318_p3 + tmp_45_fu_358_p1);

assign tmp_24_fu_458_p2 = (tmp_23_reg_851 ^ tmp_21_reg_841);

assign tmp_25_fu_394_p3 = {{tmp_47_fu_384_p4}, {11'd0}};

assign tmp_26_fu_402_p2 = ((tmp_25_fu_394_p3 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_27_fu_678_p2 = ((sum_2_cast_fu_660_p2 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_28_fu_408_p2 = ((tmp_25_fu_394_p3 == 13'd2048) ? 1'b1 : 1'b0);

assign tmp_29_fu_732_p2 = v1_2_fu_726_p2 << 32'd4;

assign tmp_2_fu_544_p3 = {{tmp_s_fu_534_p4}, {11'd0}};

assign tmp_30_fu_414_p2 = ((tmp_25_fu_394_p3 == 13'd4096) ? 1'b1 : 1'b0);

assign tmp_31_fu_738_p4 = {{v1_2_fu_726_p2[31:5]}};

assign tmp_32_fu_752_p2 = (tmp_36_fu_748_p1 ^ tmp_29_fu_732_p2);

assign tmp_33_fu_758_p2 = (v1_2_fu_726_p2 + tmp_32_fu_752_p2);

assign tmp_34_fu_769_p2 = (tmp16_fu_764_p2 + tmp_18_reg_889);

assign tmp_35_fu_774_p2 = (tmp_34_fu_769_p2 ^ tmp_33_fu_758_p2);

assign tmp_36_fu_748_p1 = tmp_31_fu_738_p4;

assign tmp_37_fu_266_p1 = sum_reg_146[1:0];

assign tmp_38_fu_474_p4 = {{v0_2_fu_462_p2[31:5]}};

assign tmp_39_fu_488_p2 = (tmp_49_fu_484_p1 ^ tmp_48_fu_468_p2);

assign tmp_3_fu_552_p2 = ((tmp_2_fu_544_p3 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_40_fu_494_p2 = (v0_2_fu_462_p2 + tmp_39_fu_488_p2);

assign tmp_41_fu_505_p2 = (tmp17_fu_500_p2 + tmp_45_reg_846);

assign tmp_42_fu_510_p2 = (tmp_41_fu_505_p2 ^ tmp_40_fu_494_p2);

assign tmp_43_fu_326_p2 = v1_reg_178 << 32'd4;

assign tmp_44_fu_342_p1 = tmp_19_fu_332_p4;

assign tmp_45_fu_358_p1 = sum_reg_146[31:0];

assign tmp_46_fu_368_p1 = sum_reg_146[12:0];

assign tmp_47_fu_384_p4 = {{sum_3_cast_fu_378_p2[12:11]}};

assign tmp_48_fu_468_p2 = v0_2_fu_462_p2 << 32'd4;

assign tmp_49_fu_484_p1 = tmp_38_fu_474_p4;

assign tmp_4_fu_614_p4 = {{v0_1_reg_210[31:5]}};

assign tmp_5_fu_270_p2 = ((tmp_37_fu_266_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_558_p2 = ((tmp_2_fu_544_p3 == 13'd2048) ? 1'b1 : 1'b0);

assign tmp_7_fu_276_p2 = ((tmp_37_fu_266_p1 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_8_fu_564_p2 = ((tmp_2_fu_544_p3 == 13'd4096) ? 1'b1 : 1'b0);

assign tmp_9_fu_282_p2 = ((tmp_37_fu_266_p1 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_fu_522_p2 = ((i_1_reg_199 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_s_fu_534_p4 = {{sum_1_reg_188[12:11]}};

assign v0_2_fu_462_p2 = (tmp_24_fu_458_p2 + v0_reg_168);

assign v0_4_fu_780_p2 = (v0_1_reg_210 - tmp_35_fu_774_p2);

assign v1_2_fu_726_p2 = (v1_1_reg_220 - tmp_14_fu_722_p2);

assign v1_4_fu_516_p2 = (tmp_42_fu_510_p2 + v1_reg_178);

endmodule //xtea
