// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xtea_fsm_HH_
#define _xtea_fsm_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct xtea_fsm : public sc_module {
    // Port declarations 43
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<6> > counter;
    sc_out< sc_lv<1> > dpValues_address0;
    sc_out< sc_logic > dpValues_ce0;
    sc_in< sc_lv<32> > dpValues_q0;
    sc_out< sc_lv<1> > dpValues_address1;
    sc_out< sc_logic > dpValues_ce1;
    sc_in< sc_lv<32> > dpValues_q1;
    sc_out< sc_lv<2> > keys_address0;
    sc_out< sc_logic > keys_ce0;
    sc_out< sc_logic > keys_we0;
    sc_out< sc_lv<32> > keys_d0;
    sc_out< sc_lv<2> > keys_address1;
    sc_out< sc_logic > keys_ce1;
    sc_out< sc_logic > keys_we1;
    sc_out< sc_lv<32> > keys_d1;
    sc_out< sc_lv<1> > values_address0;
    sc_out< sc_logic > values_ce0;
    sc_out< sc_logic > values_we0;
    sc_out< sc_lv<32> > values_d0;
    sc_in< sc_lv<32> > values_q0;
    sc_out< sc_lv<1> > values_address1;
    sc_out< sc_logic > values_ce1;
    sc_out< sc_logic > values_we1;
    sc_out< sc_lv<32> > values_d1;
    sc_in< sc_lv<32> > values_q1;
    sc_out< sc_lv<2> > memCommand;
    sc_out< sc_logic > memCommand_ap_vld;
    sc_in< sc_lv<32> > fsmState_i;
    sc_out< sc_lv<32> > fsmState_o;
    sc_out< sc_logic > fsmState_o_ap_vld;
    sc_in< sc_logic > reset;
    sc_in< sc_lv<32> > op1;
    sc_in< sc_lv<32> > op2;
    sc_in< sc_lv<2> > command;
    sc_in< sc_logic > inputReady;
    sc_out< sc_lv<32> > result1;
    sc_out< sc_logic > result1_ap_vld;
    sc_out< sc_lv<32> > result2;
    sc_out< sc_logic > result2_ap_vld;
    sc_out< sc_logic > outputReady;
    sc_out< sc_logic > outputReady_ap_vld;


    // Module declarations
    xtea_fsm(sc_module_name name);
    SC_HAS_PROCESS(xtea_fsm);

    ~xtea_fsm();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > tmp_read_fu_140_p2;
    sc_signal< sc_lv<1> > tmp_reg_419;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > tmp_1_read_fu_146_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_423;
    sc_signal< sc_lv<1> > grp_fu_393_p3;
    sc_signal< sc_lv<1> > tmp_5_reg_427;
    sc_signal< sc_lv<1> > tmp_4_reg_441;
    sc_signal< sc_lv<1> > xtea_dpValues_Val_V_s_gep_fu_263_p3;
    sc_signal< sc_lv<1> > xtea_dpValues_Val_V_1_gep_fu_272_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_401_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_455;
    sc_signal< sc_lv<1> > tmp_6_fu_407_p2;
    sc_signal< sc_lv<1> > tmp_6_reg_459;
    sc_signal< sc_lv<1> > xtea_values_Val_V_ad_2_gep_fu_308_p3;
    sc_signal< sc_lv<1> > xtea_values_Val_V_ad_3_gep_fu_317_p3;
    sc_signal< sc_lv<1> > xtea_values_Val_V_ad_gep_fu_326_p3;
    sc_signal< sc_lv<1> > tmp_2_read_fu_191_p2;
    sc_signal< sc_lv<1> > xtea_values_Val_V_ad_1_gep_fu_336_p3;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_7_fu_413_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_condition_284;
    sc_signal< bool > ap_condition_289;
    sc_signal< bool > ap_condition_294;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_condition_284();
    void thread_ap_condition_289();
    void thread_ap_condition_294();
    void thread_dpValues_address0();
    void thread_dpValues_address1();
    void thread_dpValues_ce0();
    void thread_dpValues_ce1();
    void thread_fsmState_o();
    void thread_fsmState_o_ap_vld();
    void thread_grp_fu_393_p3();
    void thread_keys_address0();
    void thread_keys_address1();
    void thread_keys_ce0();
    void thread_keys_ce1();
    void thread_keys_d0();
    void thread_keys_d1();
    void thread_keys_we0();
    void thread_keys_we1();
    void thread_memCommand();
    void thread_memCommand_ap_vld();
    void thread_outputReady();
    void thread_outputReady_ap_vld();
    void thread_result1();
    void thread_result1_ap_vld();
    void thread_result2();
    void thread_result2_ap_vld();
    void thread_tmp_1_read_fu_146_p2();
    void thread_tmp_2_read_fu_191_p2();
    void thread_tmp_3_fu_401_p2();
    void thread_tmp_6_fu_407_p2();
    void thread_tmp_7_fu_413_p2();
    void thread_tmp_read_fu_140_p2();
    void thread_values_address0();
    void thread_values_address1();
    void thread_values_ce0();
    void thread_values_ce1();
    void thread_values_d0();
    void thread_values_d1();
    void thread_values_we0();
    void thread_values_we1();
    void thread_xtea_dpValues_Val_V_1_gep_fu_272_p3();
    void thread_xtea_dpValues_Val_V_s_gep_fu_263_p3();
    void thread_xtea_values_Val_V_ad_1_gep_fu_336_p3();
    void thread_xtea_values_Val_V_ad_2_gep_fu_308_p3();
    void thread_xtea_values_Val_V_ad_3_gep_fu_317_p3();
    void thread_xtea_values_Val_V_ad_gep_fu_326_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
